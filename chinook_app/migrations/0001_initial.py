# Generated by Django 4.2.3 on 2023-07-20 16:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('albumid', models.IntegerField(db_column='AlbumId', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=160)),
            ],
            options={
                'db_table': 'Album',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('artistid', models.IntegerField(db_column='ArtistId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Artist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customerid', models.IntegerField(db_column='CustomerId', primary_key=True, serialize=False)),
                ('firstname', models.CharField(db_column='FirstName', max_length=40)),
                ('lastname', models.CharField(db_column='LastName', max_length=20)),
                ('company', models.CharField(blank=True, db_column='Company', max_length=80, null=True)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=70, null=True)),
                ('city', models.CharField(blank=True, db_column='City', max_length=40, null=True)),
                ('state', models.CharField(blank=True, db_column='State', max_length=40, null=True)),
                ('country', models.CharField(blank=True, db_column='Country', max_length=40, null=True)),
                ('postalcode', models.CharField(blank=True, db_column='PostalCode', max_length=10, null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=24, null=True)),
                ('fax', models.CharField(blank=True, db_column='Fax', max_length=24, null=True)),
                ('email', models.CharField(db_column='Email', max_length=60)),
            ],
            options={
                'db_table': 'Customer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employeeid', models.IntegerField(db_column='EmployeeId', primary_key=True, serialize=False)),
                ('lastname', models.CharField(db_column='LastName', max_length=20)),
                ('firstname', models.CharField(db_column='FirstName', max_length=20)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=30, null=True)),
                ('birthdate', models.DateTimeField(blank=True, db_column='BirthDate', null=True)),
                ('hiredate', models.DateTimeField(blank=True, db_column='HireDate', null=True)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=70, null=True)),
                ('city', models.CharField(blank=True, db_column='City', max_length=40, null=True)),
                ('state', models.CharField(blank=True, db_column='State', max_length=40, null=True)),
                ('country', models.CharField(blank=True, db_column='Country', max_length=40, null=True)),
                ('postalcode', models.CharField(blank=True, db_column='PostalCode', max_length=10, null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=24, null=True)),
                ('fax', models.CharField(blank=True, db_column='Fax', max_length=24, null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=60, null=True)),
            ],
            options={
                'db_table': 'Employee',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genreid', models.IntegerField(db_column='GenreId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('invoiceid', models.IntegerField(db_column='InvoiceId', primary_key=True, serialize=False)),
                ('invoicedate', models.DateTimeField(db_column='InvoiceDate')),
                ('billingaddress', models.CharField(blank=True, db_column='BillingAddress', max_length=70, null=True)),
                ('billingcity', models.CharField(blank=True, db_column='BillingCity', max_length=40, null=True)),
                ('billingstate', models.CharField(blank=True, db_column='BillingState', max_length=40, null=True)),
                ('billingcountry', models.CharField(blank=True, db_column='BillingCountry', max_length=40, null=True)),
                ('billingpostalcode', models.CharField(blank=True, db_column='BillingPostalCode', max_length=10, null=True)),
                ('total', models.DecimalField(db_column='Total', decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'Invoice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Invoiceline',
            fields=[
                ('invoicelineid', models.IntegerField(db_column='InvoiceLineId', primary_key=True, serialize=False)),
                ('unitprice', models.DecimalField(db_column='UnitPrice', decimal_places=2, max_digits=10)),
                ('quantity', models.IntegerField(db_column='Quantity')),
            ],
            options={
                'db_table': 'InvoiceLine',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mediatype',
            fields=[
                ('mediatypeid', models.IntegerField(db_column='MediaTypeId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=120, null=True)),
            ],
            options={
                'db_table': 'MediaType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('playlistid', models.IntegerField(db_column='PlaylistId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=120, null=True)),
            ],
            options={
                'db_table': 'Playlist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('trackid', models.IntegerField(db_column='TrackId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=200)),
                ('composer', models.CharField(blank=True, db_column='Composer', max_length=220, null=True)),
                ('milliseconds', models.IntegerField(db_column='Milliseconds')),
                ('bytes', models.IntegerField(blank=True, db_column='Bytes', null=True)),
                ('unitprice', models.DecimalField(db_column='UnitPrice', decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'Track',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Playlisttrack',
            fields=[
                ('playlistid', models.OneToOneField(db_column='PlaylistId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='chinook_app.playlist')),
            ],
            options={
                'db_table': 'PlaylistTrack',
                'managed': False,
            },
        ),
    ]
